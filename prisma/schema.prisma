generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model audit_trails {
  id           String    @id @db.Char(36)
  user_id      String?   @db.Char(36)
  title        String    @db.VarChar(255)
  link         String?   @db.Text
  reference_id String    @db.Char(36)
  section      String    @db.VarChar(255)
  type         String    @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  deleted_at   DateTime? @db.Timestamp(0)
  users        users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audit_trails_user_id_foreign")

  @@index([created_at], map: "audit_trails_created_at_index")
  @@index([user_id], map: "audit_trails_user_id_foreign")
}

model failed_jobs {
  id         String   @id @db.Char(36)
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model model_has_permissions {
  permission_id String      @db.Char(36)
  model_type    String      @db.VarChar(255)
  model_id      String      @db.Char(36)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    String @db.Char(36)
  model_type String @db.VarChar(255)
  model_id   String @db.Char(36)
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model notifications {
  id                                               String    @id @db.Char(36)
  title                                            String    @db.VarChar(255)
  assigned_to_user_id                              String    @db.Char(36)
  assigned_from_user_id                            String    @db.Char(36)
  link                                             String?   @db.VarChar(255)
  viewed                                           Boolean?
  viewed_at                                        DateTime? @db.Timestamp(0)
  created_at                                       DateTime? @db.Timestamp(0)
  updated_at                                       DateTime? @db.Timestamp(0)
  users_notifications_assigned_from_user_idTousers users     @relation("notifications_assigned_from_user_idTousers", fields: [assigned_from_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_assigned_from_user_id_foreign")
  users_notifications_assigned_to_user_idTousers   users     @relation("notifications_assigned_to_user_idTousers", fields: [assigned_to_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_assigned_to_user_id_foreign")

  @@index([assigned_from_user_id], map: "notifications_assigned_from_user_id_foreign")
  @@index([assigned_to_user_id], map: "notifications_assigned_to_user_id_foreign")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model permissions {
  id                    String                  @id @db.Char(36)
  name                  String                  @db.VarChar(255)
  label                 String                  @db.VarChar(255)
  module                String                  @db.VarChar(255)
  guard_name            String                  @default("web") @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]
}

model personal_access_tokens {
  id             String    @id @db.Char(36)
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model role_has_permissions {
  permission_id String      @db.Char(36)
  role_id       String      @db.Char(36)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   String                 @id @db.Char(36)
  name                 String                 @db.VarChar(255)
  label                String                 @db.VarChar(255)
  guard_name           String                 @default("web") @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]
}

model settings {
  id         String    @id @db.Char(36)
  key        String    @db.VarChar(255)
  value      String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model users {
  id                                                       String          @id @db.Char(36)
  name                                                     String          @db.VarChar(255)
  slug                                                     String          @db.VarChar(255)
  email                                                    String          @db.VarChar(255)
  password                                                 String?         @db.VarChar(255)
  image                                                    String?         @db.VarChar(255)
  is_office_login_only                                     Boolean         @default(true)
  is_active                                                Boolean         @default(true)
  email_verified_at                                        DateTime?       @db.Timestamp(0)
  last_logged_in_at                                        DateTime?       @db.Timestamp(0)
  two_fa_active                                            Boolean         @default(false)
  two_fa_secret_key                                        String?         @db.VarChar(255)
  invited_by                                               String?         @db.Char(36)
  invited_at                                               DateTime?       @db.Timestamp(0)
  joined_at                                                DateTime?       @db.Timestamp(0)
  invite_token                                             String?         @db.VarChar(255)
  last_activity                                            DateTime?       @db.Timestamp(0)
  remember_token                                           String?         @db.VarChar(100)
  created_at                                               DateTime?       @db.Timestamp(0)
  updated_at                                               DateTime?       @db.Timestamp(0)
  deleted_at                                               DateTime?       @db.Timestamp(0)
  audit_trails                                             audit_trails[]
  notifications_notifications_assigned_from_user_idTousers notifications[] @relation("notifications_assigned_from_user_idTousers")
  notifications_notifications_assigned_to_user_idTousers   notifications[] @relation("notifications_assigned_to_user_idTousers")
}
