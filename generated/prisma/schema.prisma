generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model model_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  model_type    String      @db.VarChar(255)
  model_id      BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    BigInt @db.UnsignedBigInt
  model_type String @db.VarChar(255)
  model_id   BigInt @db.UnsignedBigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model permissions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  guard_name            String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model role_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  guard_name           String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model users {
  id                BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name              String     @db.VarChar(255)
  email             String     @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?  @db.Timestamp(0)
  password          String     @db.VarChar(255)
  company_id        BigInt?    @db.UnsignedBigInt
  remember_token    String?    @db.VarChar(100)
  created_at        DateTime?  @db.Timestamp(0)
  updated_at        DateTime?  @db.Timestamp(0)
  companies         companies? @relation(fields: [company_id], references: [id], onUpdate: NoAction, map: "users_company_id_foreign")

  @@index([company_id], map: "users_company_id_foreign")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model categories {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  name                          String                          @db.VarChar(255)
  parent_id                     BigInt?                         @db.UnsignedBigInt
  company_id                    BigInt                          @db.UnsignedBigInt
  status                        Boolean                         @default(true)
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  companies                     companies                       @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "categories_company_id_foreign")
  categories                    categories?                     @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "categories_parent_id_foreign")
  other_categories              categories[]                    @relation("categoriesTocategories")
  integration_category_mappings integration_category_mappings[]
  offer_category                offer_category[]
  offers                        offers[]

  @@index([company_id], map: "categories_company_id_foreign")
  @@index([parent_id], map: "categories_parent_id_foreign")
}

model companies {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  registration_no               String?                         @db.VarChar(255)
  vat                           String?                         @db.VarChar(255)
  name                          String                          @db.VarChar(255)
  email                         String                          @unique(map: "companies_email_unique") @db.VarChar(255)
  domain                        String                          @unique(map: "companies_domain_unique") @db.VarChar(255)
  status                        Boolean                         @default(true)
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  categories                    categories[]
  company_frontend_settings     company_frontend_settings[]
  company_integrations          company_integrations[]
  company_profiles              company_profiles[]
  company_subscriptions         company_subscriptions[]
  integration_category_mappings integration_category_mappings[]
  offers                        offers[]
  stores                        stores[]
  users                         users[]
}

model company_frontend_settings {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  company_id BigInt    @db.UnsignedBigInt
  settings   Json?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  companies  companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_frontend_settings_company_id_foreign")

  @@index([company_id], map: "company_frontend_settings_company_id_foreign")
}

model company_integrations {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  company_id  BigInt    @db.UnsignedBigInt
  provider    String    @db.VarChar(255)
  credentials Json
  status      Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  companies   companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_integrations_company_id_foreign")

  @@unique([company_id, provider], map: "company_integrations_company_id_provider_unique")
}

model company_profiles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  company_id BigInt    @db.UnsignedBigInt
  phone      String?   @db.VarChar(255)
  address    String?   @db.Text
  country    String?   @db.VarChar(255)
  zipcode    String?   @db.VarChar(255)
  city       String?   @db.VarChar(255)
  state      String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  companies  companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_profiles_company_id_foreign")

  @@index([company_id], map: "company_profiles_company_id_foreign")
}

model company_subscriptions {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  company_id      BigInt        @db.UnsignedBigInt
  subscription_id BigInt        @db.UnsignedBigInt
  start_date      DateTime      @db.Date
  end_date        DateTime      @db.Date
  status          String        @db.VarChar(255)
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  companies       companies     @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_subscriptions_company_id_foreign")
  subscriptions   subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_subscriptions_subscription_id_foreign")
  payments        payments[]

  @@index([company_id], map: "company_subscriptions_company_id_foreign")
  @@index([subscription_id], map: "company_subscriptions_subscription_id_foreign")
}

model integration_category_mappings {
  id                BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  company_id        BigInt?     @db.UnsignedBigInt
  provider          String      @db.VarChar(255)
  external_category String      @db.VarChar(255)
  category_id       BigInt?     @db.UnsignedBigInt
  created_at        DateTime?   @db.Timestamp(0)
  updated_at        DateTime?   @db.Timestamp(0)
  categories        categories? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "integration_category_mappings_category_id_foreign")
  companies         companies?  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "integration_category_mappings_company_id_foreign")

  @@unique([company_id, provider, external_category], map: "company_provider_category_unique")
  @@index([category_id], map: "integration_category_mappings_category_id_foreign")
}

model menus {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String    @db.VarChar(255)
  href        String?   @db.VarChar(255)
  icon        String?   @db.VarChar(255)
  role        String?   @db.VarChar(255)
  permission  String?   @db.VarChar(255)
  parent_id   BigInt?   @db.UnsignedBigInt
  order       Int       @default(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  menus       menus?    @relation("menusTomenus", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "menus_parent_id_foreign")
  other_menus menus[]   @relation("menusTomenus")

  @@index([parent_id], map: "menus_parent_id_foreign")
}

model offer_category {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  offer_id    BigInt     @db.UnsignedBigInt
  category_id BigInt     @db.UnsignedBigInt
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offer_category_category_id_foreign")
  offers      offers     @relation(fields: [offer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offer_category_offer_id_foreign")

  @@unique([offer_id, category_id], map: "offer_category_offer_id_category_id_unique")
  @@index([category_id], map: "offer_category_category_id_foreign")
}

model offers {
  id             BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  company_id     BigInt           @db.UnsignedBigInt
  store_id       BigInt           @db.UnsignedBigInt
  category_id    BigInt?          @db.UnsignedBigInt
  title          String           @db.VarChar(255)
  description    String?          @db.Text
  product_url    String?          @db.VarChar(255)
  image_url      String?          @db.VarChar(255)
  price          Decimal?         @db.Decimal(10, 2)
  code           String?          @db.VarChar(255)
  start_date     DateTime?        @db.Date
  end_date       DateTime?        @db.Date
  link           String?          @db.VarChar(255)
  is_featured    Boolean          @default(false)
  is_exclusive   Boolean          @default(false)
  is_deal        Boolean          @default(false)
  path           String?          @db.VarChar(255)
  thumbnail      String?          @db.VarChar(255)
  sku            String?          @db.VarChar(255)
  product_name   String?          @db.VarChar(255)
  product_price  Decimal?         @db.Decimal(10, 2)
  old_price      Decimal?         @db.Decimal(10, 2)
  source         String?          @db.VarChar(255)
  type           offers_type      @default(deal)
  external_id    String?          @db.VarChar(255)
  status         Boolean          @default(true)
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  offer_category offer_category[]
  categories     categories?      @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "offers_category_id_foreign")
  companies      companies        @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offers_company_id_foreign")
  stores         stores           @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offers_store_id_foreign")

  @@unique([company_id, external_id, source], map: "offer_unique_per_company_and_source")
  @@index([category_id], map: "offers_category_id_foreign")
  @@index([end_date], map: "offers_end_date_index")
  @@index([is_deal], map: "offers_is_deal_index")
  @@index([is_exclusive], map: "offers_is_exclusive_index")
  @@index([is_featured], map: "offers_is_featured_index")
  @@index([source], map: "offers_source_index")
  @@index([start_date], map: "offers_start_date_index")
  @@index([status], map: "offers_status_index")
  @@index([store_id], map: "offers_store_id_foreign")
  @@index([type], map: "offers_type_index")
}

model payments {
  id                      BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  company_subscription_id BigInt                @db.UnsignedBigInt
  amount                  Decimal               @db.Decimal(10, 2)
  payment_method          String                @db.VarChar(255)
  payment_status          String                @db.VarChar(255)
  transaction_id          String?               @db.VarChar(255)
  paid_at                 DateTime?             @db.Timestamp(0)
  created_at              DateTime?             @db.Timestamp(0)
  updated_at              DateTime?             @db.Timestamp(0)
  company_subscriptions   company_subscriptions @relation(fields: [company_subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payments_company_subscription_id_foreign")

  @@index([company_subscription_id], map: "payments_company_subscription_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model stores {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  company_id    BigInt    @db.UnsignedBigInt
  name          String    @db.VarChar(255)
  image         String?   @db.VarChar(255)
  description   String?   @db.Text
  status        Int       @default(1)
  channelId     BigInt?   @db.UnsignedBigInt
  channelName   String?   @db.VarChar(255)
  programId     BigInt?   @db.UnsignedBigInt
  categoryName  String?   @db.VarChar(255)
  categoryId    BigInt?   @db.UnsignedBigInt
  productFeedId BigInt?   @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  offers        offers[]
  companies     companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "stores_company_id_foreign")

  @@index([company_id], map: "stores_company_id_foreign")
}

model subscriptions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  price                 Decimal                 @db.Decimal(10, 2)
  duration              Int
  features              Json?
  status                Boolean                 @default(true)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  company_subscriptions company_subscriptions[]
}

enum offers_type {
  deal
  coupon
  campaign
}
